{"version":3,"sources":["components/Card.js","components/CardList.js","components/Errorboundary.js","components/Scroll.js","components/SearchBar.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","Errorboundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","Scroll","style","overflowY","border","height","SearchBar","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this3","filterRobots","filter","robot","toLowerCase","includes","length","components_SearchBar","components_Scroll","components_Errorboundary","components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.3c99e7b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"Robot \" src={`https://robohash.org/${id}?200x200`}></img>\r\n            <h2> {name} </h2>\r\n            <p> {email} </p>\r\n        </div>\r\n    );\r\n}\r\nexport default Card","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    // if (true) {\r\n    //     throw new Error('nooooooooooo');\r\n    // }\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList","import React, { Component } from \"react\";\r\n\r\n\r\nclass Errorboundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1> Oooops. That is not good! </h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default Errorboundary","import React from \"react\";\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '3px solid black', height: '500px' }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;","import React from \"react\";\r\n\r\n\r\nconst SearchBar = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"search the bot\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBar;","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport Errorboundary from \"../components/Errorboundary\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport SearchBar from \"../components/SearchBar\";\r\n\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => { this.setState({ robots: users }) });\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n\r\n    }\r\n    render() {\r\n        const filterRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if (this.state.robots.length === 0) {\r\n            return <h1> Loading </h1>\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1> RoboFriend </h1>\r\n                    <SearchBar searchChange={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <Errorboundary>\r\n                            <CardList robots={filterRobots} />\r\n                        </Errorboundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import { robots } from './robots';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}